// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package repo

import (
	"context"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (user1_id, user2_id, match_score, status)
VALUES ($1, $2, $3, $4)
RETURNING id, user1_id, user2_id, match_score, status, created_at
`

type CreateMatchParams struct {
	User1ID    *string `json:"user1_id"`
	User2ID    *string `json:"user2_id"`
	MatchScore *int32  `json:"match_score"`
	Status     *string `json:"status"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRow(ctx, createMatch,
		arg.User1ID,
		arg.User2ID,
		arg.MatchScore,
		arg.Status,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.User1ID,
		&i.User2ID,
		&i.MatchScore,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (fname,lname,phoneno,email,password,bio,preferences,profile_picture)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, fname, lname, phoneno, email, password, bio, preferences, profile_picture, created_at
`


  
type CreateUserParams struct {
	Fname          string  `json:"fname"`
	Lname          string  `json:"lname"`
	Phoneno        string  `json:"phoneno"`
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	Bio            string  `json:"bio"`
	Preferences    PrefJson`json:"preferences"`
	ProfilePicture *string `json:"profile_picture"`
}

type PrefJson  struct {
	Pet string `json:"pet"`
	Job string `json:"job"`
}  


func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fname,
		arg.Lname,
		arg.Phoneno,
		arg.Email,
		arg.Password,
		arg.Bio,
		arg.Preferences,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Phoneno,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Preferences,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const deleteResetToken = `-- name: DeleteResetToken :exec
DELETE FROM password_resets WHERE token = $1
`

func (q *Queries) DeleteResetToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteResetToken, token)
	return err
}

const forgotPassword = `-- name: ForgotPassword :one
INSERT INTO password_resets (user_id, token)
VALUES ($1, $2)
RETURNING id, user_id, token, expiry
`

type ForgotPasswordParams struct {
	UserID string `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) ForgotPassword(ctx context.Context, arg ForgotPasswordParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, forgotPassword, arg.UserID, arg.Token)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Expiry,
	)
	return i, err
}

const getResetToken = `-- name: GetResetToken :many
SELECT id, user_id, token, expiry FROM password_resets
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetResetToken(ctx context.Context, token string) ([]PasswordReset, error) {
	rows, err := q.db.Query(ctx, getResetToken, token)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PasswordReset{}
	for rows.Next() {
		var i PasswordReset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Expiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, fname, lname, phoneno, email, password, bio, preferences, profile_picture, created_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Phoneno,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Preferences,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :many
SELECT id, fname, lname, phoneno, email, password, bio, preferences, profile_picture, created_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fname,
			&i.Lname,
			&i.Phoneno,
			&i.Email,
			&i.Password,
			&i.Bio,
			&i.Preferences,
			&i.ProfilePicture,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2
WHERE id = $1
RETURNING id, fname, lname, phoneno, email, password, bio, preferences, profile_picture, created_at
`

type UpdateUserPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Phoneno,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Preferences,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    fname = COALESCE($2, fname),
    lname = COALESCE($3, lname),
    phoneno = COALESCE($4, phoneno),
    email = COALESCE($5, email),
    password = COALESCE($6, password),
    bio = COALESCE($7, bio),
    preferences = COALESCE($8, preferences),
    profile_picture = COALESCE($9, profile_picture)
WHERE id = $1
RETURNING id, fname, lname, phoneno, email, password, bio, preferences, profile_picture, created_at
`

type UpdateUserProfileParams struct {
	ID             string  `json:"id"`
	Fname          string  `json:"fname"`
	Lname          string  `json:"lname"`
	Phoneno        string  `json:"phoneno"`
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	Bio            string  `json:"bio"`
	Preferences    PrefJson  `json:"preferences"`
	ProfilePicture *string `json:"profile_picture"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.ID,
		arg.Fname,
		arg.Lname,
		arg.Phoneno,
		arg.Email,
		arg.Password,
		arg.Bio,
		arg.Preferences,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Phoneno,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Preferences,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}
